@mixin colored-tag($kolor) {
    border: 1px solid $kolor;
    background: $kolor;

        @if $kolor == $yellow {
        color: $gray4;
        &:hover {
            border: 1px solid $kolor !important;
            background: lighten($kolor, 20%) !important;
        }
    } @else if $kolor == $gold {
        color: $gray4;
        &:hover {
            border: 1px solid $kolor !important;
            background: lighten($kolor, 20%) !important;
        }
    } @else if $kolor == $orange {
        color: $gray4;
        &:hover {
            border: 1px solid $kolor !important;
            background: lighten($kolor, 20%) !important;
        }
    } @else {
        color: #fff;
        &:hover {

            border: 1px solid $kolor !important;
            background: lighten($kolor, 10%) !important;
        }
    }
}

$em-base: 16;
@function em($pxval, $base: $em-base) {
    @if not unitless($pxval) {
        $pxval: strip-units($pxval);
    }
    @if not unitless($base) {
        $base: strip-units($base);
    }
    @return ($pxval / $base) * 1em;
}

@mixin clearfix {
    &:after {
        content:"";
        display:table;
        clear:both;
    }
}

@mixin noselect() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin filter($function: none) {

    @include prefixer(filter, $function, webkit spec);
}

@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

@mixin text-shadow($x, $y, $value) {
    text-shadow: $x $y $value;
}

@mixin box-shadow($value) {
    -webkit-box-shadow: $value;
    box-shadow: $value;
}

@mixin rounded($radius: 10px) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin circle($width) {
    border-radius: 50%;
    width: $width;
    height: $width;
}

@mixin bgcover() {
    -webkit-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}

@mixin opacity($decimal,$whole) {
    opacity: $decimal;
    filter: alpha(opacity=$whole);
}

@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin triangle($direction, $size: 8px, $color: #222) {
    content: '';
    display: block;

    height: 0; width: 0;
    @if ($direction == 'up') {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    }
    @else if ($direction == 'down') {
        border-top: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    }
    @else if ($direction == 'left') {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    }
    @else if ($direction == 'right') {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }
}

@mixin linear-gradient($fromColor, $toColor) {
    background-color: $toColor;
    background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor));
    background-image: -webkit-linear-gradient(top, $fromColor, $toColor);
    background-image:    -moz-linear-gradient(top, $fromColor, $toColor);
    background-image:     -ms-linear-gradient(top, $fromColor, $toColor);
    background-image:         linear-gradient(top, $fromColor, $toColor);
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}
